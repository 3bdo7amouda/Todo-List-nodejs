name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  IMAGE_NAME: todo-list-nodejs

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: |
        npx eslint . --ext .js || echo "ESLint not configured, skipping..."
        
    - name: Run tests
      run: npm test || echo "No tests specified, skipping..."
      
    - name: Check for security vulnerabilities
      run: npm audit --audit-level=moderate

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    strategy:
      matrix:
        registry:
          - name: "Docker Hub"
            url: "docker.io"
            username_secret: "DOCKERHUB_USERNAME"
            password_secret: "DOCKERHUB_TOKEN"
          - name: "GitHub Container Registry"
            url: "ghcr.io"
            username_secret: "GITHUB_ACTOR"
            password_secret: "GITHUB_TOKEN"
          - name: "Private Registry"
            url: "${{ vars.PRIVATE_REGISTRY_URL }}"
            username_secret: "PRIVATE_REGISTRY_USERNAME"
            password_secret: "PRIVATE_REGISTRY_PASSWORD"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to ${{ matrix.registry.name }}
      uses: docker/login-action@v3
      with:
        registry: ${{ matrix.registry.url }}
        username: ${{ secrets[matrix.registry.username_secret] || github.actor }}
        password: ${{ secrets[matrix.registry.password_secret] }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ matrix.registry.url }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value={{date 'YYYYMMDD-HHmmss'}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        build-args: |
          NODE_VERSION=${{ env.NODE_VERSION }}
          
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ matrix.registry.url }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image: ${{ env.IMAGE_NAME }}:develop"
        # Add your staging deployment commands here
        
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image: ${{ env.IMAGE_NAME }}:latest"
        # Add your production deployment commands here