name: Private Registry Deployment

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  REGISTRY: ${{ vars.PRIVATE_REGISTRY_URL || 'your-private-registry.com' }}
  IMAGE_NAME: todo-list-nodejs

jobs:
  build-and-push-private:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: network=host
        
    - name: Log in to Private Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.PRIVATE_REGISTRY_USERNAME }}
        password: ${{ secrets.PRIVATE_REGISTRY_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-,suffix=-{{date 'X'}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Todo List NodeJS
          org.opencontainers.image.description=A containerized Todo List application built with Node.js
          org.opencontainers.image.vendor=Your Organization
          
    - name: Build and push to private registry
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64
        provenance: true
        sbom: true
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: spdx-json
        output-file: sbom.spdx.json
        
    - name: Upload SBOM as artifact
      uses: actions/upload-artifact@v4
      with:
        name: sbom
        path: sbom.spdx.json
        
    - name: Sign container image
      if: github.event_name != 'pull_request'
      run: |
        echo "Container image signing would happen here"
        echo "Image digest: ${{ steps.build.outputs.digest }}"
        # Add cosign or similar signing tool here
        
  deploy:
    needs: build-and-push-private
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: Deploy to environment
      env:
        ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        IMAGE_DIGEST: ${{ needs.build-and-push-private.outputs.image-digest }}
      run: |
        echo "Deploying to $ENVIRONMENT environment"
        echo "Using image with digest: $IMAGE_DIGEST"
        echo "Full image reference: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST"
        
        # Example deployment commands (replace with your actual deployment logic):
        # kubectl set image deployment/todo-app todo-app=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@$IMAGE_DIGEST
        # helm upgrade todo-app ./charts/todo-app --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --set image.tag=@$IMAGE_DIGEST
        
    - name: Post deployment verification
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
        # curl -f http://your-app-url/health || exit 1